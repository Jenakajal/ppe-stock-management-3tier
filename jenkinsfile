pipeline {
  agent any

  environment {
    AWS_REGION = 'ap-south-1'
    PROJECT = 'ppe-stock-management-3tier'
    SONARQUBE = 'SonarQube'   // Jenkins global config name
    ECR_REGISTRY = credentials('ecr-registry') // Custom secret (store ECR URI here)
  }

  options {
    skipDefaultCheckout()
  }

  stages {

    stage('Clone Repository') {
      steps {
        git branch: 'main', url: 'https://github.com/Jenakajal/ppe-stock-management-3tier.git'
      }
    }

    stage('SonarQube Scan') {
      environment {
        SONAR_TOKEN = credentials('sonar-auth-token')
      }
      steps {
        withSonarQubeEnv("${SONARQUBE}") {
          script {
            def services = ['dashboard', 'view-stock', 'logout']
            for (svc in services) {
              sh """
                cd services/${svc}
                sonar-scanner \
                  -Dsonar.projectKey=${PROJECT}-${svc} \
                  -Dsonar.sources=. \
                  -Dsonar.host.url=\$SONAR_HOST_URL \
                  -Dsonar.login=\$SONAR_TOKEN
              """
            }
          }
        }
      }
    }

    stage('Docker Build & Tag') {
      steps {
        script {
          def services = ['dashboard', 'view-stock', 'logout']
          for (svc in services) {
            sh """
              docker build -t ${PROJECT}-${svc}:latest ./services/${svc}
              docker tag ${PROJECT}-${svc}:latest \$ECR_REGISTRY/${PROJECT}-${svc}:latest
            """
          }
        }
      }
    }

    stage('Trivy Scan') {
      steps {
        script {
          def services = ['dashboard', 'view-stock', 'logout']
          for (svc in services) {
            sh "trivy image --severity HIGH,CRITICAL ${PROJECT}-${svc}:latest || true"
          }
        }
      }
    }

    stage('Push to ECR') {
      environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
      }
      steps {
        script {
          sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin \$ECR_REGISTRY"
          def services = ['dashboard', 'view-stock', 'logout']
          for (svc in services) {
            sh "docker push \$ECR_REGISTRY/${PROJECT}-${svc}:latest"
          }
        }
      }
    }

    stage('Terraform Infra Apply') {
      steps {
        dir('infrastructure') {
          sh '''
            terraform init
            terraform validate
            terraform apply -auto-approve
          '''
        }
      }
    }

    stage('Update Kubeconfig') {
      steps {
        sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${PROJECT}-eks"
      }
    }

    stage('Deploy to EKS') {
      steps {
        script {
          def services = ['dashboard', 'view-stock', 'logout']
          for (svc in services) {
            sh "kubectl apply -f services/k8-manifests/${svc}/deployment.yaml"
          }
        }
      }
    }

    stage('Monitoring Info') {
      steps {
        echo "✅ Prometheus: http://<your-ec2-ip>:9090"
        echo "✅ Grafana: http://<your-ec2-ip>:3000 (default admin/admin)"
      }
    }
  }

  post {
    success {
      echo "✅ Pipeline for ${PROJECT} completed successfully!"
    }
    failure {
      echo "❌ Pipeline for ${PROJECT} failed! Check logs."
    }
    always {
      cleanWs()
    }
  }
}

