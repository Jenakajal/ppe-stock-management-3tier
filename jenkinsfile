pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Jenakajal/ppe-stock-management-3tier.git'
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('infrastructure/modules') {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        sh '''
                            set -e
                            set -x
                            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

                            terraform init
                            terraform apply -auto-approve
                        '''
                    }
                }
            }
        }


        stage('SonarQube Analysis') {
            when {
                expression { return params.ENABLE_SONARQUBE }
            }
            steps {
                withCredentials([string(credentialsId: 'SONARQUBE_TOKEN', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        cd infrastructure/microservices/dashboard
                        sonar-scanner \
                          -Dsonar.projectKey=dashboard \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://localhost:9000 \
                          -Dsonar.login=$SONAR_TOKEN
                        cd ../view-stock
                        sonar-scanner \
                          -Dsonar.projectKey=view-stock \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://localhost:9000 \
                          -Dsonar.login=$SONAR_TOKEN
                        cd ../logout
                        sonar-scanner \
                          -Dsonar.projectKey=logout \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://localhost:9000 \
                          -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Build & Push to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin <your-account-id>.dkr.ecr.$REGION.amazonaws.com

                        for SERVICE in dashboard view-stock logout
                        do
                            cd infrastructure/microservices/$SERVICE
                            docker build -t $SERVICE .
                            docker tag $SERVICE:latest <your-account-id>.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:$SERVICE
                            docker push <your-account-id>.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:$SERVICE
                            cd -
                        done
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh '''
                    for SERVICE in dashboard view-stock logout
                    do
                        kubectl apply -f k8-manifests/$SERVICE/deployment.yaml
                    done
                '''
            }
        }

        stage('Ansible Configs') {
            steps {
                dir('services/ansible') {
                    sh 'ansible-playbook -i inventory.ini playbook.yml'
                }
            }
        }

        stage('Monitoring Setup') {
            steps {
                dir('services/monitoring') {
                    sh '''
                        echo "Setting up Prometheus and Grafana..."
                        # Placeholder: depends on your setup (K8s YAMLs or Docker Compose etc.)
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo "Pipeline failed for project: ${PROJECT}"
        }
        success {
            echo "Pipeline completed successfully for project: ${PROJECT}"
        }
    }
}

